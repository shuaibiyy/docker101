<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2007-2013, Kaazing Corporation. All rights reserved.

-->

<gateway-config xmlns="http://xmlns.kaazing.com/2012/09/gateway">


  <!--
  #############################################################################
  #############################################################################
                Kaazing WebSocket Gateway Configuration File

  This configuration file identifies all the possible services and associated
  security and management that flow through Kaazing WebSocket Gateway.

  Refer to the "Setting Up Kaazing WebSocket Gateway" document for basic
  configuration information. From the table of contents, click "Configuration Element 
  Index" for a detailed list and links to descriptions of each element in this 
  configuration file.

  #############################################################################
  #############################################################################
  -->

  <!--
  Property defaults

  Specify the default values for properties which will be substituted when
  the Gateway starts. You can replace any values in this configuration file
  with a property using dollar-sign and curly brace format demonstrated in
  the <accept> tag of the echo service below. Starting the Gateway replaces
  all instances of property-name with the value you specify in this section.

  To override property default values, you can specify properties on the Java 
  command line by setting the GATEWAY_OPTS environment variable before starting 
  the Gateway. Search the documentation for "Configure Kaazing WebSocket Gateway 
  Using the GATEWAY_OPTS Environment Variable" for more examples and a list of 
  the properties you can set.
  -->
  <properties>
    <property>
      <name>gateway.hostname</name>
      <value>gateway.demo.kaazing.test</value>
    </property>
    <property>
      <name>broker.hostname</name>
      <value>activemq.demo.kaazing.test</value>
    </property>
    <property>
      <name>gateway.base.port</name>
      <value>8000</value>
    </property>
    <property>
      <name>gateway.extras.port</name>
      <value>8001</value>
    </property>
  </properties>

  <!--
  Echo service
  The echo service is a service that receives a string of characters
  through a WebSocket and returns the same characters to the sender.
  The service "echoes" any input. This service is primarily used
  for validating the basic Gateway configuration.
  -->

  <service>
    <name>echo</name>
    <description>Simple echo service</description>
    <accept>ws://${gateway.hostname}:${gateway.extras.port}/echo</accept>

    <type>echo</type>


    <!--
    You can set accept options at the service level or at the service defaults level.
    Setting options at the service level overrides options you set at the service
    defaults level.

    See the Service Defaults block of this configuration file for information on the
    accept options you can set.

    For example, you can set accept options for binding WebSocket (ws) and WebSocket
    secure (wss) to different ports on the Gateway host. You can only bind protocols for
    addresses present in the service's accept strings. If you try to bind a
    protocol for an address that does not exist in the service's accept strings,
    the bindings will have no effect.
    -->

    <!--
    <accept-options>
      <ws.bind>80</ws.bind>
      <wss.bind>443</wss.bind>
    </accept-options>
    -->

    <!--
    Use this security realm when authenticating users.  See the Security block of this
    configuration file for information on realm configuration.
    -->
    <realm-name>demo</realm-name>

    <!--
    <authorization-constraint>
      <require-role>AUTHORIZED</require-role>
    </authorization-constraint>
    -->

    <cross-site-constraint>
      <allow-origin>*</allow-origin>
    </cross-site-constraint>
  </service>

  <!--
  Directory service
  The directory service is a service that exposes a directory of files.
  It is used to host static files accessed via the embedded web server within
  the Kaazing WebSocket Gateway. For example, the Kaazing 'home' page and
  all of the Kaazing developer and administration documentation in the
  Gateway distribution are accessed through this service.

  The <directory> tag specifies the path of your static files relative
  to GATEWAY_HOME/web, where GATEWAY_HOME is the directory where you
  installed the Kaazing WebSocket Gateway.
  Note: An absolute path cannot be specified.
  -->

  <service>
    <name>base-directory</name>
    <description>Directory service for base files</description>
    <accept>http://${gateway.hostname}:${gateway.base.port}/</accept>

    <type>directory</type>
    <properties>
      <directory>/base</directory>
      <welcome-file>index.html</welcome-file>
      <error-pages-directory>/error-pages</error-pages-directory>
      <options>indexes</options>
    </properties>

    <realm-name>demo</realm-name>

    <!--
    <authorization-constraint>
      <require-role>AUTHORIZED</require-role>
    </authorization-constraint>
    -->
  </service>

  <service>
    <name>extras-directory</name>
    <description>Directory service for demo (extras) files</description>
    <accept>http://${gateway.hostname}:${gateway.extras.port}/</accept>
    <type>directory</type>
    <properties>
      <directory>/extras</directory>
      <welcome-file>index.html</welcome-file>
      <options>indexes</options>
    </properties>

    <realm-name>demo</realm-name>

    <!--
    <authorization-constraint>
      <require-role>AUTHORIZED</require-role>
    </authorization-constraint>
    -->
  </service>

  <service>
    <name>commandcenter-directory</name>
    <description>Directory service for the Command Center files</description>
    <accept>http://${gateway.hostname}:${gateway.base.port}/commandcenter</accept>

    <type>directory</type>
    <properties>
      <directory>/commandcenter</directory>
      <welcome-file>index.html</welcome-file>
      <error-pages-directory>/error-pages</error-pages-directory>
      <options>indexes</options>
    </properties>
  </service>

  <!--
  #############################################################################
  #############################################################################
                       Security configuration
  #############################################################################
  #############################################################################
  -->
  <!-- Security configuration -->
  <security>
    <!--
    The keystore element is used to configure the keystore that contains
    encryption keys for secure communications with Kaazing WebSocket Gateway.
    -->
    <keystore>
      <type>JCEKS</type>
      <file>keystore.db</file>
      <password-file>keystore.pw</password-file>
    </keystore>

    <!--
    The truststore element is used to configure the truststore that
    contains digital certificates for certificate authorities
    trusted by Kaazing WebSocket Gateway.
    -->
    <truststore>
      <file>truststore.db</file>
    </truststore>

    <!--
    This is the element that associates an authenticated user with a set
    of authorized roles.
    -->
    <realm>
      <name>demo</name>
      <description>Kaazing WebSocket Gateway Demo</description>

      <!--
      This is the element that specifies how authentication of users
      is undertaken for the realm.
      -->
      <authentication>

        <!--
        Specifies how the Gateway issues HTTP challenges when
        unauthorized connections are made. Standard HTTP "Basic"
        and "Negotiate" are supported, with the Application variants:
        "Application Basic", and "Application Negotiate".  For custom
        HTTP challenge schemes, use "Application Token".
        -->
        <http-challenge-scheme>Application Basic</http-challenge-scheme>

        <!--
        The HTTP items below specify how the Gateway accepts credentials
        when connections are made.  In addition to the standard HTTP
        "Authorization" header, the Gateway can access credentials sent in
        custom HTTP headers, query parameters and cookies.
        -->

        <!--
        <http-header>Custom-Header-Name</http-header>
        <http-query-parameter>Query-Parameter-Name</http-query-parameter>
        <http-cookie>Cookie-Name</http-cookie>
        -->

        <!--
        The period of time for which authorized connections
        remain valid without re-authorizing.
        -->
        <authorization-timeout>1800</authorization-timeout>

        <!--
        The login modules below specify how the Gateway communicates
        with a "user database" to validate user credentials, and
        to determine a set of authorized roles.
        -->
        <login-modules>
          <!--
          The login module communicates with a user database to
          validate user's credentials and to determine a set of
          authorized roles. By default, the file-based module is used.
          -->
          <login-module>
            <type>file</type>
            <success>required</success>
            
            <options>
              <file>jaas-config.xml</file>
            </options>
          </login-module>

          <!--
          The following is an example of an LDAP-based login-module element:
          -->
          <!--
          <login-module>
            <type>ldap</type>
            <success>required</success>
            <options>
              <userProvider>ldap://ldap-svr/ou=people,dc=example,dc=com</userProvider>
              <userFilter>(&amp;(uid={USERNAME})(objectClass=inetOrgPerson))</userFilter>
              <authzIdentity>{EMPLOYEENUMBER}</authzIdentity>
            </options>
          </login-module>
          -->

          <!--
          Kaazing WebSocket Gateway also supports a plugin mechanism for integration
          with custom authentication modules based on the Java LoginModule API.
          To use a custom authentication module, configure your login-module element
          as follows:
          -->
          <!--
          <login-module>
            <type>class:fully-qualified-class-name</type>
            <success>required</success>
            <options>
              .
              .
              .
            </options>
          </login-module>
          -->
        </login-modules>
      </authentication>
    </realm>

    <!-- 
    The realm used by the Command Center for authentication. The SNMP
     management service should be the only one to use this realm. 
    -->
    <realm>
      <name>commandcenter</name>
      <description>Command Center</description>

      <authentication>
        <http-challenge-scheme>Application Basic</http-challenge-scheme>

        <http-cookie>kaazingCommandCenter</http-cookie>

        <authorization-timeout>1800</authorization-timeout>

        <login-modules>
          <!--
          The login module communicates with a user database to
          validate user's credentials and to determine a set of
          authorized roles. By default, the file-based module is used.
          -->
          <login-module>
            <type>file</type>
            <success>required</success>
            <options>
              <file>jaas-config.xml</file>
            </options>
          </login-module>
        </login-modules>
      </authentication>
    </realm>
  </security>


  <!--
  #############################################################################
  #############################################################################
                            Upgrading Your License

  The developer's version of the Kaazing WebSocket Gateway demo bundle allows
  only a limited number of concurrent client connections.
  To upgrade your license, contact sales@kaazing.com.
  After you place a valid license key in GATEWAY_HOME/license, messages similar
  to the following example INFO messages display in your shell or command
  prompt at Gateway startup:
  INFO  Checking license information
  INFO    Valid license found for: Joe User, Example Corporation,
          joe@example.com
  INFO    License expires on 06 Jun 2044
  INFO  Starting in licensed mode
  #############################################################################
  #############################################################################
  -->
  <!--
  #############################################################################
  #############################################################################
                       Additional service configuration

  Note: Proxy services are designed to proxy connections to back-end service.
  #############################################################################
  #############################################################################
  -->

  <!--
  jms service
  See the documentation for information about the jms service.

  Note: When JMS security settings are specified, they take precedence over
  any browser-supplied credentials.
  Additional properties can be specified. Refer to the field summary in
  http://download.oracle.com/javase/7/docs/api/javax/naming/Context.html for a
  complete list.
  Kaazing WebSocket Gateway does not enforce any of these property values;
  it just passes them to the JMS API.

  JMS implementations provide a factory class in their jar files. For example,
  the Apache ActiveMQ class that ships in the demo bundle is
  org.apache.activemq.jndi.ActiveMQInitialContextFactory in the jar file
  activemq-core-5.3.0.jar.

  To use another JMS implementation, copy the implementation's jar file to
  the GATEWAY_HOME/lib directory and specify the name of the class as the
  value for the env.java.naming.factory.initial property. Refer to the section
  of the documentation titled "Integrating with JMS-Compliant Message Brokers"
  for more information about configuring specific JMS message brokers with
  Kaazing WebSocket Gateway.

  -->
  <service>
    <name>JMS Service</name>
    <description>JMS Service</description>
    <accept>ws://${gateway.hostname}:${gateway.extras.port}/jms</accept>

    <!--
    The "Deploying Apple Push Notification Service (APNs)" section of the
    documentation discusses this element in more detail.  Alternatively, 
    search the documentation for "APNS" for more examples and 
    configuration properties you can set.
    -->
    <!--
    <notify>apns://com.example.MyApp</notify>
    -->

    <type>jms</type>

    <properties>
      <connection.factory.name>ConnectionFactory</connection.factory.name>
      <context.lookup.topic.format>dynamicTopics/%s</context.lookup.topic.format>
      <context.lookup.queue.format>dynamicQueues/%s</context.lookup.queue.format>
      <env.java.naming.factory.initial>org.apache.activemq.jndi.ActiveMQInitialContextFactory</env.java.naming.factory.initial>
      <env.java.naming.provider.url>tcp://${broker.hostname}:61616</env.java.naming.provider.url>
    </properties>

    <!--
    The "Deploying Apple Push Notification Service (APNs)" topic
    discusses this element in more detail.  Alternatively, search the
    documentation for "APNS" for more examples and configuration properties
    you can set.
    -->
    <!--
    <notify-options>
      <apns.notify.transport>ssl://gateway.push.apple.com:2195</apns.notify.transport>
      <apns.feedback.transport>ssl://feedback.push.apple.com:2196</apns.feedback.transport>
    </notify-options>
    -->

    <realm-name>demo</realm-name>

    <!--
    <authorization-constraint>
      <require-role>AUTHORIZED</require-role>
    </authorization-constraint>
-->

    <cross-site-constraint>
      <allow-origin>*</allow-origin>
    </cross-site-constraint>
  </service>

  <!--
  Session service
  This type of service is used to prevent sessions from timing out.
  From the documentation table of contents, click the 
  "Configuration Element Reference" and then click "session (service)"
  for more information.
  Note: Communication with the session service should be always be
  configured to use HTTPS. For demonstration purposes, this example
  does not use HTTPS because the demo server lacks a certificate.
  -->
  <service>
    <name>session</name>
    <description>session service</description>
    <accept>http://${gateway.hostname}:${gateway.extras.port}/session</accept>

    <type>session</type>

    <realm-name>demo</realm-name>

    <!--
    <authorization-constraint>
      <require-role>AUTHORIZED</require-role>
    </authorization-constraint>
    -->
  </service>

  <!-- 
  JMX Management service.
  
  <service>
    <name>JMX Management</name>
    <description>JMX management service</description>

    <type>management.jmx</type>

    <properties>
      <connector.server.address>jmx://${gateway.hostname}:2020/</connector.server.address>
    </properties>

    <realm-name>demo</realm-name>

    <authorization-constraint>
      <require-role>ADMINISTRATOR</require-role>
    </authorization-constraint>
  </service>
-->
  <!-- 
  SNMP Management service.
  -->
  <service>
    <name>SNMP Management</name>
    <description>SNMP management service</description>
    <accept>ws://${gateway.hostname}:${gateway.base.port}/snmp</accept>

    <type>management.snmp</type>

    <realm-name>commandcenter</realm-name>

    <authorization-constraint>
      <require-role>ADMINISTRATOR</require-role>
    </authorization-constraint>

    <cross-site-constraint>
      <allow-origin>*</allow-origin>
    </cross-site-constraint>
  </service>

  <!--
  #############################################################################
  #############################################################################
                             Service Defaults
  #############################################################################
  #############################################################################
  -->

  <!--
  The accept element in a service is frequently sufficient for the service to
  receive messages and requests. However, sometimes the value of the accept
  element does not match the physical description of the host. For example, the
  Gateway may be behind a load balancer or in a cloud environment, in which case
  its local network information may not match the settings specified by the
  accept element.

  For instance, your service may accept on ws://www.example.com but that
  hostname resolves to the IP address of the load balancer, not the Gateway
  host. In such a case, you can configure the Gateway using the {protocol}.bind
  element, which enables you to bind the address specified in the accept element
  to an internal address (where the address maps in your network). This option
  provides a choice of binding the address to a specific port or hostname and
  port (if you specify a hostname here, you must specify a port).

  From the documentation table of contents, search for the document 
  "Integrate Kaazing WebSocket Gateway into an Internal Network" for more information.

  You can configure default values that apply to all services. Elements and
  values you specify in individual services override the defaults you specify
  in this section. The following list shows the service configurations
  you can specify in this section:

    * Accept Options

      - SSL Encryption
        The SSL encryption can be in one of two forms:

          <ssl.encryption>enabled</ssl.encryption>
        or
          <ssl.encryption>disabled</ssl.encryption>

        The default is <ssl.encryption>enabled</ssl.encryption> so does not need to be
        explicitly set if there is no ssl.encryption specified.

      - Protocol binds
        These are in the form:

        <{protocol}.bind>[hostname:]port</{protocol}.bind>

        {protocol} is one of ws, wss, http, https, ssl, or tcp. In the value,
        hostname is optional, but port is required. If a hostname (or IP
        address) is not specified, then the Gateway will bind to the wildcard
        address (0.0.0.0) using the given port. Binding to the wildcard address
        means the Gateway will listen on all interfaces of the host.

        If there are multiple accepts on a service, each using different
        protocols, then each protocol that needs to be bound must be explicitly
        bound. For example:

        <service>
          <accept>http://192.168.10.25:8000/echo</accept>
          <accept>ws://192.168.10.25:8001/echo</accept>
          <accept-options>
            <http.bind>80</http.bind>
            <ws.bind>443</ws.bind>
          </accept-options>
        </service>

     - Maximum WebSocket message size
        By default, the maximum size of data permitted in an incoming WebSocket
        frame is 128 kilobytes. 
		From the documentation table of contents, search for "maximum.message.size" 
		for more information.
        You can change the maximum incoming data size over
        ws and wss by setting the following accept-option:

        <ws.maximum.message.size>64k</ws.maximum.message.size>

      - HTTP(S) keep-alive timeout
        This is the number of seconds the Gateway will wait for a subsequent request
        on an HTTP or HTTPS connection before closing the connection to conserve
        resources.
		From the documentation table of contents, search for "http.keepalive.timeout" 
		for more information.
		The default value is 30 seconds. You can change this value by setting
        the following accept-option:

        <http.keepalive.timeout>120</http.keepalive.timeout>

      An example for setting service defaults (turning SSL encryption off, binding each
      protocol, reducing the limit for incoming WebSocket frame size and increasing the
      timeout for HTTP connections) is as follows. Note that in this example both ws
      and http are bound to port 80. This works because they are compatible protocols.
      Similarly, wss and https can both be bound to the same port because they are
      compatible protocols. However, if you try to bind incompatible protocols to the
      same port, you will receive a port conflict error on Gateway startup. For instance,
      you cannot bind ws and https to the same port.

      <service-defaults>
        <accept-options>
          <ssl.encryption>disabled</ssl.encryption>
          <ws.bind>80</ws.bind>
          <wss.bind>192.168.10.25:443</wss.bind>
          <http.bind>192.168.10.25:80</http.bind>
          <https.bind>192.168.10.25:443</https.bind>
          <tcp.bind>192.168.10.25:8075</tcp.bind>
          <ws.maximum.message.size>32k</ws.maximum.message.size>
          <http.keepalive.timeout>60</http.keepalive.timeout>
        </accept-options>
      </service-defaults>

    * MIME-type Mappings

      A service can return files of various types to a client.  Generally, HTTP
      mandates that a response containing a file also specify a Content-Type
      header describing the file contents.  You may use a <mime-mapping> tag to specify
      the Content-Type value to be returned for files with a particular name extension.
      For example:

      <mime-mapping>
        <extension>png</extension>
        <mime-type>image/png</mime-type>
      </mime-mapping>
      <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html</mime-type>
      </mime-mapping>

      This example indicates that for files with names ending in '.png', the header 
      'Content-Type: image/png' should be returned by the Gateway, and 'Content-Type: text/html'
      should be returned for .html files. Mappings can be specified in the both the
      <service-defaults> block and in any <service> blocks.  If a mapping for a given extension
      is specified in both the <service-defaults> block and a <service> block, the <service>-level
      mapping will be used when providing files from that service.

      An initial set of mappings is provided in <service-defaults> below, and should be edited
      as needed, but not removed. If specified in <service-defaults>, all <mime-mapping> blocks
      must come after any <accept-options>. If specified in <service>, all <mime-mapping> blocks
      must come just before any <cross-site-constraint> blocks.
  -->
  <service-defaults>
    <mime-mapping>
      <extension>html</extension>
      <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>htm</extension>
      <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>js</extension>
      <mime-type>text/javascript</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>png</extension>
      <mime-type>image/png</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>gif</extension>
      <mime-type>image/gif</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>jpg</extension>
      <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>jpeg</extension>
      <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>css</extension>
      <mime-type>text/css</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>swf</extension>
      <mime-type>application/x-shockwave-flash</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>xap</extension>
      <mime-type>application/x-silverlight-app</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>htc</extension>
      <mime-type>text/x-component</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>jnlp</extension>
      <mime-type>application/x-java-jnlp-file</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>manifest</extension>
      <mime-type>text/cache-manifest</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>appcache</extension>
      <mime-type>text/cache-manifest</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>vtt</extension>
      <mime-type>text/vtt</mime-type>
    </mime-mapping>
    <mime-mapping>
      <extension>aspx</extension>
      <mime-type>text/html</mime-type>
    </mime-mapping>
  </service-defaults>

  <!--
  #############################################################################
  #############################################################################
                            Do not remove closing element
  #############################################################################
  #############################################################################
  -->

</gateway-config>

